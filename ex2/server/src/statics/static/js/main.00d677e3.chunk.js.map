{"version":3,"sources":["components/button/index.tsx","_constants/Transition.ts","_constants/header.ts","_constants/localStorage.ts","components/common/customButton/index.tsx","hooks/useDetechScreen.ts","configs/environments/index.ts","configs/axios/index.ts","services/transtion.ts","containers/gameContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","props","state","isActived","onClick","buttonClass","toLocaleLowerCase","className","defaultProps","React","STATE","memo","LIST_STATE","BLU","GREEN","YELLOW","X_AUTH","customStyle","desktop","width","height","borderRadius","mobile","CustomButton","isDeskTop","useMediaQuery","query","style","API_ENDPOINT","process","makeRequest","axios","create","baseURL","headers","Accept","interceptors","response","use","HEADER","localStorage","setItem","LOCAL_STORAGE","error","Promise","reject","request","config","xAuth","getItem","TransitionService","getNextState","a","method","data","reset","message","GameContainer","useState","TRANSITION","setState","getTransition","stateClick","nextState","newState","useEffect","renderGame","map","eachState","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.00d677e3.chunk.js","sourcesContent":["import {TRANSITION} from \"@constants\";\r\nimport React, {useMemo} from \"react\";\r\nimport './index.scss'\r\ninterface IButton {\r\n    state: TRANSITION.STATE,\r\n    isActived?: boolean,\r\n    onClick?: () => void\r\n}\r\n\r\nconst Button: React.FC<IButton> = (props) => {\r\n    const {state, isActived, onClick} = props;\r\n\r\n    let buttonClass = `dot dot--${state.toLocaleLowerCase()}`;\r\n    if (isActived) {\r\n        buttonClass += \" active\";\r\n    }\r\n    return (\r\n        <span className={buttonClass} onClick={onClick}></span>\r\n    )\r\n}\r\n\r\nButton.defaultProps = {\r\n    isActived: false\r\n}\r\n\r\nexport default React.memo(Button);","export enum STATE {\r\n    YELLOW = \"Yellow\",\r\n    GREEN = \"Green\",\r\n    BLU = \"Blu\"\r\n}\r\n\r\nexport const LIST_STATE = [STATE.BLU, STATE.GREEN, STATE.YELLOW,];","export const X_AUTH = \"x-auth\"","export const X_AUTH = \"xAuth\";","import {TRANSITION} from \"@constants\";\r\nimport React, {useMemo, CSSProperties} from \"react\";\r\nimport {useDetechScreen} from '@hooks/useDetechScreen';\r\nimport './index.scss'\r\n\r\nconst customStyle: {\r\n    desktop: CSSProperties,\r\n    mobile: CSSProperties,\r\n} = {\r\n    desktop: {\r\n        width: '8em',\r\n        height: '3em',\r\n        borderRadius: '1em',\r\n    },\r\n    mobile: {\r\n        width: '80%',\r\n        height: '2em',\r\n        borderRadius: '1em',\r\n    }\r\n\r\n\r\n};\r\n\r\nconst CustomButton: React.FC<any> = (props) => {\r\n    const {className, onClick} = props;\r\n    const isDeskTop = useDetechScreen();\r\n    return (\r\n        <button style={isDeskTop ? customStyle.desktop : customStyle.mobile} onClick={onClick} className={className} >\r\n            reset\r\n        </button>\r\n    )\r\n}\r\n\r\n\r\nexport default React.memo(CustomButton);","import {useLayoutEffect, useState} from \"react\";\r\nimport {useMediaQuery} from 'react-responsive'\r\n\r\nconst useDetechScreen = () => {\r\n    const isDestopOrLaptop = useMediaQuery({\r\n        query: '(min-width: 1224px)'\r\n    })\r\n\r\n    return isDestopOrLaptop;\r\n}\r\n\r\nexport {\r\n    useDetechScreen\r\n}","\r\nconst API_ENDPOINT = process.env.API_ENDPOINT || 'http://localhost:4000/api';\r\n\r\n\r\nexport {\r\n    API_ENDPOINT\r\n\r\n}","import axios from 'axios'\r\n\r\nimport {API_ENDPOINT} from '@environments';\r\nimport {LOCAL_STORAGE, HEADER} from '@constants';\r\n\r\nexport const makeRequest = axios.create({\r\n    baseURL: API_ENDPOINT,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        Accept: 'application/json',\r\n    },\r\n});\r\nmakeRequest.interceptors.response.use(function (response) {\r\n    const {headers} = response;\r\n\r\n    //hard coding\r\n    if (headers[HEADER.X_AUTH]) {\r\n        localStorage.setItem(LOCAL_STORAGE.X_AUTH, headers[HEADER.X_AUTH])\r\n    }\r\n\r\n    return response;\r\n}, function (error) {\r\n    return Promise.reject(error);\r\n});\r\n\r\nmakeRequest.interceptors.request.use(function (config) {\r\n    // Do something before request is sent\r\n    const xAuth = localStorage.getItem(LOCAL_STORAGE.X_AUTH);\r\n    if (xAuth) {\r\n        config.headers[HEADER.X_AUTH] = xAuth;\r\n    }\r\n\r\n    return config;\r\n}, function (error) {\r\n    // Do something with request error\r\n    return Promise.reject(error);\r\n});","import {TRANSITION} from \"@constants\";\r\nimport {makeRequest} from '@configs/axios';\r\ninterface Response {\r\n    data: any,\r\n    message: string\r\n}\r\ninterface ITransitionService {\r\n    getNextState: (state: TRANSITION.STATE) => Promise<Response>,\r\n    reset: () => Promise<Response>\r\n}\r\n\r\nconst TransitionService: ITransitionService = {\r\n    getNextState: async (state: TRANSITION.STATE) => {\r\n        const {data: response} = await makeRequest(`/transitions/${state}`, {\r\n            method: 'PATCH',\r\n        });\r\n        return response;\r\n\r\n    },\r\n    reset: async () => {\r\n        const response = await makeRequest(`/transitions/reset`, {\r\n            method: 'PATCH',\r\n        });\r\n\r\n        return {\r\n            data: response.data.data,\r\n            message: response.data.message\r\n        };\r\n    }\r\n}\r\n\r\nexport {TransitionService};","\r\nimport React, {useState} from \"react\";\r\nimport Button from '@components/button';\r\nimport './index.scss';\r\nimport {TRANSITION} from \"@constants\";\r\nimport ButtomCustom from \"@components/common/customButton\";\r\nimport {TransitionService} from '@services';\r\nimport {useEffect} from \"react\";\r\nconst GameContainer = () => {\r\n    const [state, setState] = useState<TRANSITION.STATE>(TRANSITION.STATE.BLU);\r\n\r\n\r\n    const getTransition = async (stateClick) => {\r\n        const {data} = await TransitionService.getNextState(stateClick);\r\n\r\n        const {state: nextState} = data;\r\n        setState(nextState);\r\n    }\r\n\r\n    const reset = async () => {\r\n        const nextState = await TransitionService.reset();\r\n        const {state: newState} = nextState.data;\r\n        setState(newState);\r\n    }\r\n\r\n    const onReset = () => {\r\n        reset();\r\n    }\r\n\r\n    useEffect(() => {\r\n        getTransition(state);\r\n    }, []);\r\n\r\n    const renderGame = TRANSITION.LIST_STATE.map((eachState) => {\r\n\r\n        return (<li >\r\n            <Button state={eachState} isActived={eachState === state} onClick={() => getTransition(eachState)} />\r\n        </li>)\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <div >\r\n\r\n                <ul className=\"map\">\r\n\r\n                    {renderGame}\r\n                    <li>\r\n                        <ButtomCustom className=\"button--rotate\" onClick={onReset} />\r\n                    </li>\r\n\r\n                </ul>\r\n\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GameContainer;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport GameContainer from '@containers/gameContainer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GameContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: httpas://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}